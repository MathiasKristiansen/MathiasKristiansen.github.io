// Trying to use best practices: use strict, let and const variables and some JQuery
"use strict";

// Show tool tip
$(document).tooltip({
  position: {
    my: "left bottom-10",
    at: "left+10 top",
  },
});

$(document).ready(function () {
  // Output save file funtionality
  // Create variable to store output string
  let outputString = "";
  // Create variable to store output file data
  let outputFile = null;
  // Function to populate the output file data variable
  function makeOutputFile(text) {
    // Create data variable as a blob
    const data = new Blob([text], { type: "text/plain" });
    // If we are replacing a previously generated file we need to manually revoke the object URL to avoid memory leaks.
    if (outputFile !== null) {
      window.URL.revokeObjectURL(outputFile);
    }
    // Create data URL
    outputFile = window.URL.createObjectURL(data);
    // Return output file data URL
    return outputFile;
  }
  // Create output file button functionality
  $("#createOutputFile").on("click", function () {
    // Create output string
    // Clear existing output string
    outputString = "";
    // Get output table element
    const table = document.getElementById("output");
    // Loop through output table rows
    for (let i = 0, row; (row = table.rows[i]); i++) {
      // Rows would be accessed using the "row" variable assigned in the for loop
      // Loop through table row cells
      for (let j = 0, col; (col = row.cells[j]); j++) {
        // Columns would be accessed using the "col" variable assigned in the for loop
        // Build output string
        // Check to make sure the current cell does not specify a 'noOutput' class
        if (!col.classList.contains("noOutput")) {
          // If this is not the first field, prefix with a comma to take care of the delimiter between this and the previous field
          if (j > 0) {
            outputString += ",";
          }
          // Append cell data to output
          outputString += '"' + col.innerHTML.replace(/&amp;/g, "&") + '"';
        }
      }
      // Append row delimiter
      outputString += "\n";
    }
    // Set the download link href to a data URL generated by the makeOutputFile function, then make the link visible.
    $("#downloadLink")
      .attr("href", makeOutputFile(outputString))
      .css("display", "inline");
  });

  // Output table delete row buttons
  $("table#output").on("click", ".deleteRow", function () {
    // Confirm delete command
    if (confirm("Are you sure you want to delete this row?")) {
      // Slowly fade the element out, then remove it
      $(this)
        .parent()
        .parent()
        .hide("", function () {
          this.remove();
        });
      // Hide download link
      $("#downloadLink").css("display", "none");
    }
  });

  // Delete all rows button click function
  $("#deleteAllRows").on("click", function () {
    // Delete all table rows
    // Confirm delete command
    if (confirm("Are you sure you want to delete all rows?")) {
      // Slowly fade the element out, then remove it
      $("table#output tbody tr").hide("", function () {
        this.remove();
      });
      //Hide download link
      $("#downloadLink").css("display", "none");
      //Hide delete all rows button
      $("#deleteAllRows").css("display", "none");
    }
  });

  // Clear form button click function
  $("#clearForm").on("click", function () {
    // Confirm clear fields command
    if (confirm("Are you sure you want to clear all fields?")) {
      // Clear all field values
      $("#url").val("");
      $("#source").val("");
      $("#medium").val("");
      $("#campaign").val("");
      $("#term").val("");
      $("#content").val("");
    }
  });

  // Generate button click function
  $("#generate").on("click", function () {
    // Call generate campaign URL function
    fnGenerateCampaignURL();
  });

  // Generate campaign URL function
  function fnGenerateCampaignURL() {
    // Save field values to variables (trim the strings and replace spaces with plus signs)
    const url = $("#url").val();
    let source = $("#source").val();
    const medium = $("#medium").val();
    const campaign = $("#campaign").val();
    const term = $("#term").val().trim().toLowerCase().replace(/ /g, "+");
    const content = $("#content").val().trim().toLowerCase().replace(/ /g, "+");

    // Generate URL
    // Initialize variables
    let tagged_url = "";
    let error_message = "";

    // Date
    const d = new Date();
    const month = d.getMonth() + 1;
    const day = d.getDate();
    const dateOutput =
      (day < 10 ? "0" : "") +
      day +
      "/" +
      (month < 10 ? "0" : "") +
      month +
      "/" +
      d.getFullYear();

    // Do we have all other required fields?
    if (
      !(
        medium.length > 0 &&
        source.length > 0 &&
        campaign.length > 0 &&
        url.length > 0
      )
    ) {
      error_message = "Missing required fields.";
    }

    // If we have not seen any errors...
    if (error_message.length == 0) {
      // Begin tagged URL
      tagged_url = url;
      // Begin parameters with a question mark
      tagged_url += "?";
      // Add source
      tagged_url += "utm_source=" + source;
      // Add medium
      tagged_url += "&utm_medium=" + medium;
      // Add campaign
      tagged_url += "&utm_campaign=" + campaign;
      // Add term (optional)
      if (term.length > 0) {
        tagged_url += "&utm_term=" + term;
      }
      // Add content (optional)
      if (content.length > 0) {
        tagged_url += "&utm_content=" + content;
      }
    }

    // If we have a tagged_url result, display it in the table
    if (tagged_url.length > 0) {
      // Set output element value in table
      $("table#output tbody").append(
        "<tr><td>" +
          dateOutput +
          "</td><td>" +
          url +
          "</td><td>" +
          source +
          "</td><td>" +
          medium +
          "</td><td>" +
          campaign +
          "</td><td>" +
          content +
          "</td><td>" +
          term +
          "</td><td>" +
          tagged_url +
          "</td><td class='noOutput'><button class='deleteRow'>Delete</button></td></tr>"
      );
      // Hide download link
      $("#downloadLink").css("display", "none");
      // Show 'delete all rows' button
      $("#deleteAllRows").css("display", "inline");
    }

    // Copy the latest generated link to the clipboard
    $("#copy").one("click", function () {
      // Create new input html element, because the select() only accepts that
      let fullLink = document.createElement("input");
      document.body.appendChild(fullLink);
      // Finds the last row, second to last column (data/cell)
      fullLink.value = $("table#output tbody tr:last td:last").prev().text();
      // Selects and copies it
      fullLink.select();
      document.execCommand("copy", false);
      // Removes the input element from the DOM
      fullLink.remove();
      alert("Copied the link:\n" + fullLink.value).one();
    });

    // If we have an error message, display it
    if (error_message.length > 0) {
      // Set error message element value
      $("#error").html("<p><strong>Error:</strong> " + error_message + "</p>");
    } else {
      // Clear output element value
      $("#error").empty();
    }
  }
});
